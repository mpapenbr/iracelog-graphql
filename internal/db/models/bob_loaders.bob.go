// Code generated by BobGen psql v0.40.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
)

var Preload = getPreloaders()

type preloaders struct {
	CCar       cCarPreloader
	CCarDriver cCarDriverPreloader
	CCarEntry  cCarEntryPreloader
	CCarTeam   cCarTeamPreloader
	Event      eventPreloader
	Tenant     tenantPreloader
	Track      trackPreloader
}

func getPreloaders() preloaders {
	return preloaders{
		CCar:       buildCCarPreloader(),
		CCarDriver: buildCCarDriverPreloader(),
		CCarEntry:  buildCCarEntryPreloader(),
		CCarTeam:   buildCCarTeamPreloader(),
		Event:      buildEventPreloader(),
		Tenant:     buildTenantPreloader(),
		Track:      buildTrackPreloader(),
	}
}

var (
	SelectThenLoad = getThenLoaders[*dialect.SelectQuery]()
	InsertThenLoad = getThenLoaders[*dialect.InsertQuery]()
	UpdateThenLoad = getThenLoaders[*dialect.UpdateQuery]()
)

type thenLoaders[Q orm.Loadable] struct {
	CCar       cCarThenLoader[Q]
	CCarDriver cCarDriverThenLoader[Q]
	CCarEntry  cCarEntryThenLoader[Q]
	CCarTeam   cCarTeamThenLoader[Q]
	Event      eventThenLoader[Q]
	Tenant     tenantThenLoader[Q]
	Track      trackThenLoader[Q]
}

func getThenLoaders[Q orm.Loadable]() thenLoaders[Q] {
	return thenLoaders[Q]{
		CCar:       buildCCarThenLoader[Q](),
		CCarDriver: buildCCarDriverThenLoader[Q](),
		CCarEntry:  buildCCarEntryThenLoader[Q](),
		CCarTeam:   buildCCarTeamThenLoader[Q](),
		Event:      buildEventThenLoader[Q](),
		Tenant:     buildTenantThenLoader[Q](),
		Track:      buildTrackThenLoader[Q](),
	}
}

func thenLoadBuilder[Q orm.Loadable, T any](name string, f func(context.Context, bob.Executor, T, ...bob.Mod[*dialect.SelectQuery]) error) func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
	return func(queryMods ...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
		return func(ctx context.Context, exec bob.Executor, retrieved any) error {
			loader, isLoader := retrieved.(T)
			if !isLoader {
				return fmt.Errorf("object %T cannot load %q", retrieved, name)
			}

			err := f(ctx, exec, loader, queryMods...)

			// Don't cause an issue due to missing relationships
			if errors.Is(err, sql.ErrNoRows) {
				return nil
			}

			return err
		}
	}
}
