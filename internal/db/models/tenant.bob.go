// Code generated by BobGen psql v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/gofrs/uuid/v5"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// Tenant is an object representing the database table.
type Tenant struct {
	ID int32 `db:"id,pk" `
	// for external use
	ExternalID uuid.UUID `db:"external_id" `
	Name       string    `db:"name" `
	APIKey     string    `db:"api_key" `
	Active     bool      `db:"active" `

	R tenantR `db:"-" `
}

// TenantSlice is an alias for a slice of pointers to Tenant.
// This should almost always be used instead of []*Tenant.
type TenantSlice []*Tenant

// Tenants contains methods to work with the tenant table
var Tenants = psql.NewTablex[*Tenant, TenantSlice, *TenantSetter]("", "tenant")

// TenantsQuery is a query on the tenant table
type TenantsQuery = *psql.ViewQuery[*Tenant, TenantSlice]

// tenantR is where relationships are stored.
type tenantR struct {
	Events EventSlice // event.event_tenant_id_fk
}

type tenantColumnNames struct {
	ID         string
	ExternalID string
	Name       string
	APIKey     string
	Active     string
}

var TenantColumns = buildTenantColumns("tenant")

type tenantColumns struct {
	tableAlias string
	ID         psql.Expression
	ExternalID psql.Expression
	Name       psql.Expression
	APIKey     psql.Expression
	Active     psql.Expression
}

func (c tenantColumns) Alias() string {
	return c.tableAlias
}

func (tenantColumns) AliasedAs(alias string) tenantColumns {
	return buildTenantColumns(alias)
}

func buildTenantColumns(alias string) tenantColumns {
	return tenantColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		ExternalID: psql.Quote(alias, "external_id"),
		Name:       psql.Quote(alias, "name"),
		APIKey:     psql.Quote(alias, "api_key"),
		Active:     psql.Quote(alias, "active"),
	}
}

type tenantWhere[Q psql.Filterable] struct {
	ID         psql.WhereMod[Q, int32]
	ExternalID psql.WhereMod[Q, uuid.UUID]
	Name       psql.WhereMod[Q, string]
	APIKey     psql.WhereMod[Q, string]
	Active     psql.WhereMod[Q, bool]
}

func (tenantWhere[Q]) AliasedAs(alias string) tenantWhere[Q] {
	return buildTenantWhere[Q](buildTenantColumns(alias))
}

func buildTenantWhere[Q psql.Filterable](cols tenantColumns) tenantWhere[Q] {
	return tenantWhere[Q]{
		ID:         psql.Where[Q, int32](cols.ID),
		ExternalID: psql.Where[Q, uuid.UUID](cols.ExternalID),
		Name:       psql.Where[Q, string](cols.Name),
		APIKey:     psql.Where[Q, string](cols.APIKey),
		Active:     psql.Where[Q, bool](cols.Active),
	}
}

var TenantErrors = &tenantErrors{
	ErrUniqueApiKey: &UniqueConstraintError{s: "tenant_api_key_unique"},

	ErrUniqueExternalID: &UniqueConstraintError{s: "tenant_external_id_unique"},

	ErrUniqueName: &UniqueConstraintError{s: "tenant_name_unique"},
}

type tenantErrors struct {
	ErrUniqueApiKey *UniqueConstraintError

	ErrUniqueExternalID *UniqueConstraintError

	ErrUniqueName *UniqueConstraintError
}

// TenantSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TenantSetter struct {
	ID         omit.Val[int32]     `db:"id,pk" `
	ExternalID omit.Val[uuid.UUID] `db:"external_id" `
	Name       omit.Val[string]    `db:"name" `
	APIKey     omit.Val[string]    `db:"api_key" `
	Active     omit.Val[bool]      `db:"active" `
}

func (s TenantSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.ExternalID.IsUnset() {
		vals = append(vals, "external_id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.APIKey.IsUnset() {
		vals = append(vals, "api_key")
	}

	if !s.Active.IsUnset() {
		vals = append(vals, "active")
	}

	return vals
}

func (s TenantSetter) Overwrite(t *Tenant) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.ExternalID.IsUnset() {
		t.ExternalID, _ = s.ExternalID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.APIKey.IsUnset() {
		t.APIKey, _ = s.APIKey.Get()
	}
	if !s.Active.IsUnset() {
		t.Active, _ = s.Active.Get()
	}
}

func (s *TenantSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Tenants.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.ExternalID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.ExternalID)
		}

		if s.Name.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Name)
		}

		if s.APIKey.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.APIKey)
		}

		if s.Active.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Active)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TenantSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TenantSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.ExternalID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "external_id")...),
			psql.Arg(s.ExternalID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.APIKey.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "api_key")...),
			psql.Arg(s.APIKey),
		}})
	}

	if !s.Active.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "active")...),
			psql.Arg(s.Active),
		}})
	}

	return exprs
}

// FindTenant retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTenant(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Tenant, error) {
	if len(cols) == 0 {
		return Tenants.Query(
			SelectWhere.Tenants.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Tenants.Query(
		SelectWhere.Tenants.ID.EQ(IDPK),
		sm.Columns(Tenants.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TenantExists checks the presence of a single record by primary key
func TenantExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Tenants.Query(
		SelectWhere.Tenants.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Tenant is retrieved from the database
func (o *Tenant) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tenants.AfterSelectHooks.RunHooks(ctx, exec, TenantSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Tenants.AfterInsertHooks.RunHooks(ctx, exec, TenantSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Tenants.AfterUpdateHooks.RunHooks(ctx, exec, TenantSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Tenants.AfterDeleteHooks.RunHooks(ctx, exec, TenantSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Tenant
func (o *Tenant) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Tenant) pkEQ() dialect.Expression {
	return psql.Quote("tenant", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Tenant
func (o *Tenant) Update(ctx context.Context, exec bob.Executor, s *TenantSetter) error {
	v, err := Tenants.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Tenant record with an executor
func (o *Tenant) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Tenants.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Tenant using the executor
func (o *Tenant) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Tenants.Query(
		SelectWhere.Tenants.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TenantSlice is retrieved from the database
func (o TenantSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tenants.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Tenants.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Tenants.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Tenants.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TenantSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("tenant", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TenantSlice) copyMatchingRows(from ...*Tenant) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TenantSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tenants.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Tenant:
				o.copyMatchingRows(retrieved)
			case []*Tenant:
				o.copyMatchingRows(retrieved...)
			case TenantSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Tenant or a slice of Tenant
				// then run the AfterUpdateHooks on the slice
				_, err = Tenants.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TenantSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tenants.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Tenant:
				o.copyMatchingRows(retrieved)
			case []*Tenant:
				o.copyMatchingRows(retrieved...)
			case TenantSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Tenant or a slice of Tenant
				// then run the AfterDeleteHooks on the slice
				_, err = Tenants.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TenantSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TenantSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tenants.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TenantSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tenants.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TenantSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Tenants.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type tenantJoins[Q dialect.Joinable] struct {
	typ    string
	Events func(context.Context) modAs[Q, eventColumns]
}

func (j tenantJoins[Q]) aliasedAs(alias string) tenantJoins[Q] {
	return buildTenantJoins[Q](buildTenantColumns(alias), j.typ)
}

func buildTenantJoins[Q dialect.Joinable](cols tenantColumns, typ string) tenantJoins[Q] {
	return tenantJoins[Q]{
		typ:    typ,
		Events: tenantsJoinEvents[Q](cols, typ),
	}
}

func tenantsJoinEvents[Q dialect.Joinable](from tenantColumns, typ string) func(context.Context) modAs[Q, eventColumns] {
	return func(ctx context.Context) modAs[Q, eventColumns] {
		return modAs[Q, eventColumns]{
			c: EventColumns,
			f: func(to eventColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Events.Name().As(to.Alias())).On(
						to.TenantID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// Events starts a query for related objects on event
func (o *Tenant) Events(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	return Events.Query(append(mods,
		sm.Where(EventColumns.TenantID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TenantSlice) Events(mods ...bob.Mod[*dialect.SelectQuery]) EventsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return Events.Query(append(mods,
		sm.Where(psql.Group(EventColumns.TenantID).In(PKArgs...)),
	)...)
}

func (o *Tenant) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Events":
		rels, ok := retrieved.(EventSlice)
		if !ok {
			return fmt.Errorf("tenant cannot load %T as %q", retrieved, name)
		}

		o.R.Events = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Tenant = o
			}
		}
		return nil
	default:
		return fmt.Errorf("tenant has no relationship %q", name)
	}
}

func ThenLoadTenantEvents(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTenantEvents(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TenantEvents", retrieved)
		}

		err := loader.LoadTenantEvents(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTenantEvents loads the tenant's Events into the .R struct
func (o *Tenant) LoadTenantEvents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Events = nil

	related, err := o.Events(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Tenant = o
	}

	o.R.Events = related
	return nil
}

// LoadTenantEvents loads the tenant's Events into the .R struct
func (os TenantSlice) LoadTenantEvents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	events, err := os.Events(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Events = nil
	}

	for _, o := range os {
		for _, rel := range events {
			if o.ID != rel.TenantID {
				continue
			}

			rel.R.Tenant = o

			o.R.Events = append(o.R.Events, rel)
		}
	}

	return nil
}

func insertTenantEvents0(ctx context.Context, exec bob.Executor, events1 []*EventSetter, tenant0 *Tenant) (EventSlice, error) {
	for i := range events1 {
		events1[i].TenantID = omit.From(tenant0.ID)
	}

	ret, err := Events.Insert(bob.ToMods(events1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertTenantEvents0: %w", err)
	}

	return ret, nil
}

func attachTenantEvents0(ctx context.Context, exec bob.Executor, count int, events1 EventSlice, tenant0 *Tenant) (EventSlice, error) {
	setter := &EventSetter{
		TenantID: omit.From(tenant0.ID),
	}

	err := events1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachTenantEvents0: %w", err)
	}

	return events1, nil
}

func (tenant0 *Tenant) InsertEvents(ctx context.Context, exec bob.Executor, related ...*EventSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	events1, err := insertTenantEvents0(ctx, exec, related, tenant0)
	if err != nil {
		return err
	}

	tenant0.R.Events = append(tenant0.R.Events, events1...)

	for _, rel := range events1 {
		rel.R.Tenant = tenant0
	}
	return nil
}

func (tenant0 *Tenant) AttachEvents(ctx context.Context, exec bob.Executor, related ...*Event) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	events1 := EventSlice(related)

	_, err = attachTenantEvents0(ctx, exec, len(related), events1, tenant0)
	if err != nil {
		return err
	}

	tenant0.R.Events = append(tenant0.R.Events, events1...)

	for _, rel := range related {
		rel.R.Tenant = tenant0
	}

	return nil
}
