// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// This models a more 'generic' driver with participation in events and teams.
type Driver struct {
	// The driver name used
	Name string `json:"name"`
	// The teams in which the driver was a member
	Teams []*Team `json:"teams"`
	// The events in which the driver participated
	Events []*Event `json:"events"`
	// The car numbers used by this driver
	CarNum []string `json:"carNum"`
	// The car classes used by this driver
	CarClass []string `json:"carClass"`
}

// This models a driver in a concrete event
type EventDriver struct {
	Name   string `json:"name"`
	CarNum string `json:"carNum"`
}

type EventSortArg struct {
	Field EventSortField `json:"field"`
	Order *SortOrder     `json:"order"`
}

type EventTeam struct {
	Name    string         `json:"name"`
	CarNum  string         `json:"carNum"`
	Drivers []*EventDriver `json:"drivers"`
}

// This models a more 'generic' driver with participation in events and teams.
type Team struct {
	Name     string       `json:"name"`
	Drivers  []*Driver    `json:"drivers"`
	CarNum   []string     `json:"carNum"`
	CarClass []string     `json:"carClass"`
	Teams    []*EventTeam `json:"teams"`
	Events   []*Event     `json:"events"`
}

type User struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EventSortField string

const (
	EventSortFieldName       EventSortField = "NAME"
	EventSortFieldRecordDate EventSortField = "RECORD_DATE"
	EventSortFieldTrack      EventSortField = "TRACK"
)

var AllEventSortField = []EventSortField{
	EventSortFieldName,
	EventSortFieldRecordDate,
	EventSortFieldTrack,
}

func (e EventSortField) IsValid() bool {
	switch e {
	case EventSortFieldName, EventSortFieldRecordDate, EventSortFieldTrack:
		return true
	}
	return false
}

func (e EventSortField) String() string {
	return string(e)
}

func (e *EventSortField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSortField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSortField", str)
	}
	return nil
}

func (e EventSortField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
